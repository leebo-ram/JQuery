getter , setter 메소드
선택자에 의해 선택된 요소의 값을 읽거나 설정하기 위해 제이쿼리 메소드를 통해 해당 요소에 접근해야 합니다. getter 메소드는 선택된 요소에 접근하여 그 값을 읽어오기 위한 메소드입니다. getter 메소드는 아무런 인수를 전달하지 않고 호출합니다. setter 메소드는 선택된 요소에 접근하여 그 값을 설정하기 위한 메소드입니다.
setter 메소드는 대입하고자 하는 값을 인수로 전달하여 호출합니다.

html() : 해당 요소의 HTML 컨텐츠를 반환하거나 설정합니다. (js의 innerHTML과 같음)
text() : 해당 요소의 텍스트 컨텐츠를 반환하거나 설정합니다. (js의 innerText과 같음)
width() : 선택한 요소 중에서 첫번째 요소의 너비를 픽셀 단위의 정수로 반환하거나 설정합니다.
height() : 선택한 요소 중에서 첫번째 요소의 높이를 픽셀 단위의 정수로 반환하거나 설정합니다.
attr() : 해당 요소의 명시된 속성의 속성값을 반환하거나 설정합니다. 
val() : <form>요소의 값을 반환하거나 설정합니다.

<p id="text"></p>

const text = document.getElementById("text");
text.innerHTML = "<b>안녕하세요</b>";

const text = $('#text').html()  // getter 메소드
$('#text').html('<i>안녕하세요</i>);    //setter 메소드

메소드 체이닝(method chaining)
getter 메소드는 선택된 요소의 값을 읽어서 그 값을 반환합니다. 만약 선택한 요소가 여러개 존재하면 getter 메소드는 가장 '첫전째 요소'의 값만 반환합니다. 하지만 setter 메소드는 선택된 모든 요소에 인수로 전달된 값을 설정합니다. 그리고 선택된 모든 요소에 접근할 수 있는 또 다른 제이쿼리 객체를 반환합니다. 반환된 제이쿼리 객체를 이용하면 세미콜론을 사용하지 않아도 바로 다른 제이쿼리 메소드를 점으로 연결해서 호출 할 수 있습니다. 이런 방식의 여러 메소드가 연속적으로 호출되는 방식을 메소드 체이닝이라고 합니다.

add() : 특정 요소를 추가로 선택할 때 사용합니다.
children() : 매개변수로 전달된 요소를 자식 요소에서 찾아줍니다. 매개변수를 전달하지 않으면 자식 요소의 모든 요소를 선택합니다.
addBack() ; 현재 선택한 요소와 함께 이전에 선택한 요소도 선택하게 합니다.
find() : 선택한 요소의 자손 요소 중에서 전달받은 선택자에 해당하는 자손 요소를 모두 선택합니다. 별표를 인수로 전달하여 선택한 자손 요소를 모두 선택할 수도 있습니다.
end() ; 현재의 연속적인 명령(메소드 체이닝)을 종료하고 선택 집합의 이전 요소를 찾아 반환합니다.
is() : 인수로 전달된 요소가 존재하는지 여부(true, false)를 반환합니다.

//! 메소드 체이닝에도 사용할 수 있는 메소드이다. 개별적으로도 사용가능함!



jQuery로 DOM 다루기

요소의 추가
append() : 선택한 요소의 마지막에 새로운 요소나 컨텐츠를 추가합니다.
$('선택자').append('요소');

appendTo() : append() 메소드와 같지만 소스의 타겟의 위치가 서로 반대입니다.
$('요소').appendTo('선택자');

prepend() : 선택한 요소의 처음에 새로운 요소나 컨텐츠를 추가합니다.
prependTo() : prepend() 메소드와 같지만 소스의 타겟의 위치가 서로 반대입니다.

//! 메소드 체이닝에 붙이기 위해 2개씩 제공함.

기존 요소의 외부에 추가하는 방법
before() : 선택한 요소의 바로 앞에 새로운 요소나 컨텐츠를 추가합니다.
insertBefore() : before() 메소드와 같지만 소스와 타겟의 위치가 서로 반대입니다.
after() : 선택한 요소 바로 뒤에 새로운 요소나 컨텐츠를 추가합니다
insertAfter() : after() 메소드와 같지만 소스와 타겟의 위치가 서로 반대입니다.

//! 취업사이트 이력서의 경력부분에 셀을 추가할 때 사용함!!


요소의 포함
wrap() : 선택한 요소를 포함하는 새로운 요소를 추가합니다.
wrapAll() : 선택한 모든 요소를 포함하는 새로운 요소를 추가합니다.
wrapInner() : 선택한 요소에 포함되는 새로운 요소를 추가합니다.


요소의 복사
clone() : 선택한 요소를 복사하여 새로운 요소를 생성합니다. clone() 메소드는 기존 HTML 요소를 복사하여 새로운 HTML 요소를 생성할 뿐입니다. 따라서 append(), appendTo() 메소드와 같은 다른 메소드를 이용하여 요소를 추가해야합니다.

요소의 대체
replaceAll() : 선택한 요소를 지정된 요소로 대체합니다. 이 메소드는 인수로 선택자나 제이쿼리 객체, HTML DOM 요소, 배열등을 전달 받을 수 있습니다.


**12일! 과제제출 끝내기!!!!!!!!!!!!!!!!!!

요소의 삭제
remove() : 선택한 요소를 DOM 트리에서 삭제합니다. 삭제되는 요소와 연관된 제이쿼리 데이터나 이벤트 모두 함께 삭제됩니다.
detach() : 선택한 요소를 DOM 트리에서 삭제합니다. 삭제되는 요소와 연관된 제이쿼리 데이터나 이베ㅔㄴ트는 삭제되지 않고 계속 유지됩니다. detach() 메소드가 반환되는 반환되는 제이쿼리 객체를 append()나 prepend()와 같은 메소드에 인수로 전달하면 삭제된 요소를 다시 복구 할 수 있습니다.
empty() : 선택한 요소의 자식 요소를 모두 삭제합니다. 이때 remove()나 detach() 메소드와 달리 선택된 요소 그 자체는 삭제되지 않습니다.
unwrap() : 선택한 요소의 부모 요소를 삭제합니다.



조상 요소의 탐색
parent() : 선택한 요소의 부모요소를 선택합니다. 이 때 선택자를 인수로 전달하여 전달받은 선택자에 해당하는 부모 요소만을 선택할 수 있습니다.
parents() : 선택한 요소의 조상 요소를 모두 선택합니다. 이 때 선택자를 인수로 전달하여 전달받은 선택자에 해당하는 조상 요소를 모두 선택할 수 있습니다.
parentsUntil() : 선택한 요소의 조상 요소 중에서 전달받은 선택자에 해당하는 요소 바로 이전까지의 요소만을 모두 선택합니다. 이때 선택자를 인수로 전달하지 않으면 parents() 메소드와 같이 선택한 요소의 조상 요소를 모두 선택합니다.


형제 요소의 탐색
siblings() : 선택한 요소의 형제 요소 중에서 지정한 선택자에 해당하는 요소를 모두 선택합니다.
next() : 선택한 요소의 바로 다음에 위치한 형제 요소를 선택합니다.
nextAll() : 선택한 요소의 다음에 위치한 형제 요소를 모두 선택합니다. 이때 선택자를 인수로 전달하여, 전달받은 선택자에 해당하는 형제 요소만을 선택할 수 있습니다.
nextUntil() : 선택한 요소의 형제 요소 중에서 전달받은 선택자에 해당하는 요소 바로 이전까지의 요소만을 모두 선택합니다. 이때 선택자를 인수로 전달하지 않으면 nextAll() 메소드와 같이 선택한 요소의 다음에 위치한 형제요소를 모두 선택합니다.
prev() : 선택한 요소의 바로 이전에 위치한 형제 요소를 선택합니다.
prevAll() : 선택한 요소의 이전에 위치한 형제 요소를 모두 선택합니다. 이때 선택자를 인수로 전달하여, 전달받은 선택자에 해당하는 형제 요소만을 선택할 수 있습니다.
prevUntil() : 선택한 요소의 형제 요소 중에서 전달받은 선택자에 해당하는 요소 바로 이전까지의 요소만을 모두 선택합니다. 이때 선택자를 인수로 전달하지 않으면 prevAll() 메소드와 같이 선택한 요소의 이전에 위치한 형제요소를 모두 선택합니다.


자손 요소의 탐색
children() : 매개변수로 전달된 요소를 하위 요소에서 찾아줍니다. 매개변수를 전달하지 않으면 하위 요소의 모든 요소를 선택합니다.
find() : 선택한 요소의 자손 요소 중에서 전달받은 선택자에 해당하는 자손 요소를 모두 선택합니다. 별표(*)를 인수로 전달하여 선택한 자손 요소를 모두 선택할 수도 있습니다.


박스모델 관련 메소드
width() : 가로 크기를 가져오거나 설정하는 메소드입니다.
height() : 세로 크기를 가져오거나 설정하는 메소드입니다.
innerWidth() : 요소의 가로크기 + 패딩의 가로크기를 합한 크기를 가져오거나 설정하는 메소드입니다.
innerHeight() : 요소의 세로크기 + 패딩의 세로크기를 합한 크기를 가져오거나 설정하는 메소드입니다.
outerWidth() : 요소의 가로크기 + 패딩의 가로크기 + 테두리의 가로크기를 합한 크기를 가져오거나 설정하는 메소드입니다.
outerHeight() : 요소의 세로크기 + 패딩의 세로크기 + 테두리의 세로크기를 합한 크기를 가져오거나 설정하는 메소드입니다. 
outerWidth(true) : 요소의 가로크기 + 패딩의 가로크기 + 테두리의 가로크기 + 마진의 가로크기를 합한 크기를 가져오거나 설정하는 메소드입니다.
outerHeight(true) : 요소의 세로크기 + 패딩의 세로크기 + 테두리의 세로크기 + 마진의 세로크기를 합한 크기를 가져오거나 설정하는 메소드입니다.


attribute 와 property의 차이

<input type="checkbox" name="hobby" value="드라이브" checked="checked">  //! 예전 방식
<input type="checkbox" name="hobby" value="드라이브" checked>

attr() : 해당 요소의 명시된 속성의 속성값을 반환하거나 설정합니다.
prop() : 제이쿼리 1.6부터 정의된 메소드입니다. 선택한 요소 집합의 첫번째 요소의 지정된 프로퍼티 값을 변환하거나, 선택한 요소의 지정된 프로퍼티를 전달받은 값으로 설정합니다.
 //! 음원사이트의 음원선택해서 듣기, 온라인 쇼핑의 장바구니 등등 checkbox가 있는 곳이면 모두 사용하는 기능임!!

클래스의 설정
addClass() : 클래스를 추가합니다.
removeClass() : 클래스를 제거합니다.
toggleClass() : 선택한 요소에 클래스가 없으면 인수로 전달받은 클래스가 추가되고, 전달받은 클래스가 추가되어 있으면 제거합니다.
hasClass() : 인수로 전달받은 값이 선택한 요소의 클래스 이름과 일치하는지 확인합니다.


실습 및 과제
투어리스트인 투어 회원가입, 로그인에 스크립트를 적용
(단, 회원가입을 자유롭게 기획하여 재작성)
